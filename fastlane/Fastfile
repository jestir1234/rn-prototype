fastlane_version '2.53.1'

HOCKEYAPP_API_TOKEN = "0823b11280c34c99bfbbd7e298dac262"
DEVELOPMENT_BRANCH_NAME = "development"

ANDROID_HOCKEYAPP_STAGING_APP_ID = "70ca4978a957449586bbab756d2f3f26"
ANDROID_STAGING_BUILD_VARIANT = "Staging"
ANDROID_STAGING_APK_FILENAME = "app-staging.apk"

IOS_HOCKEYAPP_STAGING_APP_ID = "62398936977b4d7a8dfbe56d2017fa99"
IOS_IPA_NAME = "GoReadyMade.ipa"
IOS_SCHEME = "GoReadyMade"
IOS_XCODE_VERSION = "9.3"


desc 'Remove the node modules directory and download a fresh copy of node modules'
private_lane :clean_and_install_node_modules do
  # download node dependencies
  sh("cd .. && rm -rf node_modules/ && npm install")
end

after_all do |lane|
  subtitle = "Fastlane: #{lane}"
  message = "Fastlane has finished successfully ðŸŽ‰"
  # sends a notification
  notification(subtitle: subtitle, message: message)
end

########## TEST RELATED FASTLANE LANES COME HERE ##########

desc 'Running Ui tests on Android.'
private_lane :run_ui_tests_android do
  # installing Detox
  sh("pwd && cd .. && pwd && npm install -g detox-cli")
  # Building Staging Android app for UI Tests
  sh("pwd && cd .. && pwd && detox build -c android.emu.staging")
  # Executing UI Tests on Android staging app
  sh("pwd && cd .. && pwd && detox test -c android.emu.staging --cleanup")
end

desc 'Running Ui tests on IOS.'
private_lane :run_ui_tests_ios do
  # installing Detox
  sh("pwd && cd .. && pwd && npm install -g detox-cli")
  # Building Release IOS app for UI Tests
  sh("pwd && cd .. && pwd && detox build -c ios.sim.release")
  # Executing UI Tests on IOS Release app
  sh("pwd && cd .. && pwd && detox test -c ios.sim.release --cleanup")
end

desc 'Running Unit tests'
private_lane :run_unit_tests do
  sh("pwd && cd ..&& pwd && npm test")
end

########################################################### 

########## IOS RELATED FASTLANE LANES COME HERE ###########

platform :ios do
  UI.important("Platform IOS")
  if is_ci
    # If you want to automatically update fastlane if a new version is available:
    # update_fastlane
    setup_jenkins
    xcode_select "/Applications/Xcode.app"
    # reset_simulators
  end

  # ensure_xcode_version(version: XCODE_VERSION)
  # ensure_git_status_clean

  desc "This lane releases IOS app for current development branch on HockeyApp"
  lane :release_development_branch do |options|
    build_number = options[:build_number]
    UI.crash!("You didn\'t specified the build number") if build_number == nil

    ensure_git_branch(branch: DEVELOPMENT_BRANCH_NAME)

    set_build_number(job_build_number: build_number)
    # Ui tests are Unreliable
    # run_ui_tests_ios
    build
    release_hockey(
      ipa_output_path: SharedValues::IPA_OUTPUT_PATH,
      hockey_app_id: IOS_HOCKEYAPP_STAGING_APP_ID
    )
  end

  desc "This lane builds IOS app for current development branch"
  lane :build_development_branch do |options|
    build_number = options[:build_number]
    UI.crash!("You didn\'t specified the build number") if build_number == nil

    set_build_number(job_build_number: build_number)
    # Ui tests are Unreliable
    # run_ui_tests_ios
    build
  end

  desc 'Build the iOS application.'
  private_lane :build do
    # get_certificates           # invokes cert
    # get_provisioning_profile   # invokes sigh
    gym(
      project: './ios/GoReadyMade.xcodeproj',
      # workspace: workspace, # TODO if start using workspace, probably need to use this one
      scheme: IOS_SCHEME,
      silent: false,
      export_method: "enterprise",
      clean: true,
      # derived_data_path: "DerivedData",
      output_directory: "build",
      archive_path: "build/",
      output_name: IOS_IPA_NAME,
      configuration: "Release"
    )
    UI.message "IPA: " + lane_context[SharedValues::IPA_OUTPUT_PATH]
  end

  private_lane :set_build_number do |options|
   job_build_number = options[:job_build_number]

    if(job_build_number)
      build_number = "#{job_build_number}"
    else
      build_number = "1"
    end

    increment_build_number(
      build_number: build_number,
      xcodeproj: './ios/GoReadyMade.xcodeproj'
    )
  end

  private_lane :release_hockey do |options|
   ipa_output_path = options[:ipa_output_path]
    pr_title = options[:pr_title]
    hockey_app_id = options[:hockey_app_id]

  	if(pr_title)
      notes = "Pull request title: #{pr_title}"
    else
      notes = "Build for branch : #{git_branch}"
    end

    hockey(
      api_token: HOCKEYAPP_API_TOKEN,
      ipa: lane_context[ipa_output_path],
      notes: notes,
      public_identifier: hockey_app_id,
      notify: "0"
    )
  end
  
end
########################################################### 


########## ANDROID RELATED FASTLANE LANES COME HERE #######

platform :android do
  UI.important("Platform Android")
  UI.important("Using JDK:")
  puts `java -version`
  
  desc "This lane releases android app for current development branch on HockeyApp"
  lane :release_development_branch do |options|
    clean_and_install_node_modules
    run_unit_tests
    build_number = options[:build_number]
    UI.crash!("You didn\'t specified the build number") if build_number == nil

    ensure_git_branch(branch: DEVELOPMENT_BRANCH_NAME)

    ENV["VERSION_CODE"] = build_number
    #  Ui tests are Unreliable
    #  run_ui_tests_android
    build(build_variant: ANDROID_STAGING_BUILD_VARIANT)
    release_hockey(
      apk_filename: ANDROID_STAGING_APK_FILENAME,
      hockey_app_id: ANDROID_HOCKEYAPP_STAGING_APP_ID
    )
  end

  desc "This lane builds android app for current development branch"
  lane :build_development_branch do |options|
    clean_and_install_node_modules
    run_unit_tests
    build_number = options[:build_number]
    UI.crash!("You didn\'t specified the build number") if build_number == nil

    ENV["VERSION_CODE"] = build_number
    #  Ui tests are Unreliable
    #  run_ui_tests_android
    build(build_variant: ANDROID_STAGING_BUILD_VARIANT)
  end

  desc 'Build the Android application.'
  private_lane :build do |options|
    build_variant = options[:build_variant]

    if !build_variant
      UI.important("Building all variants")
      build_variant = ""
    else
      UI.important("Building variant " + build_variant)
    end

    UI.important("Cleaning project")
    gradle(task: 'clean', project_dir: 'android/')

    UI.important("Building project")
    gradle(task: 'assemble', build_type: build_variant, project_dir: 'android/')
  end

  desc "Clean, build and release the app on HockeyApp"
  private_lane :release_hockey do |options|
    apk_filename = options[:apk_filename]
    hockey_app_id = options[:hockey_app_id]

    found = false
    for apk_path in lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
      found = apk_path.include? apk_filename
      if found
        break
      end
    end

    UI.crash!("Cannot find the APK " + apk_filename) if !found
    UI.important("Uploading to HockeyApp " + apk_path)

    hockey(
      api_token: HOCKEYAPP_API_TOKEN,
      apk: apk_path,
      public_identifier: hockey_app_id,
      notify: '0'
    )
  end

end

###########################################################